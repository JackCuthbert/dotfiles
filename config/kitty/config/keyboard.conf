# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map ctrl+shift+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard {{{
# map ctrl+shift+v        paste_from_clipboard
# map ctrl+shift+s        paste_from_selection
# map ctrl+shift+c        copy_to_clipboard
# map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map ctrl+shift+o      pass_selection_to_program firefox
# map ctrl+shift+o        pass_selection_to_program
# }}}

# Scrolling {{{
# map ctrl+shift+up        scroll_line_up
# map ctrl+shift+down      scroll_line_down
# map ctrl+shift+k         scroll_line_up
# map ctrl+shift+j         scroll_line_down
# map ctrl+shift+page_up   scroll_page_up
# map ctrl+shift+page_down scroll_page_down
# map ctrl+shift+home      scroll_home
# map ctrl+shift+end       scroll_end
# map ctrl+shift+h         show_scrollback
# }}}

# Window management {{{
# map ctrl+shift+enter    new_window
# map ctrl+shift+n        new_os_window
# map ctrl+shift+w        close_window
# map ctrl+shift+]        next_window
# map ctrl+shift+[        previous_window
# map ctrl+shift+f        move_window_forward
# map ctrl+shift+b        move_window_backward
# map ctrl+shift+`        move_window_to_top
# map ctrl+shift+1        first_window
# map ctrl+shift+2        second_window
# map ctrl+shift+3        third_window
# map ctrl+shift+4        fourth_window
# map ctrl+shift+5        fifth_window
# map ctrl+shift+6        sixth_window
# map ctrl+shift+7        seventh_window
# map ctrl+shift+8        eighth_window
# map ctrl+shift+9        ninth_window
# map ctrl+shift+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
# map ctrl+shift+right    next_tab
# map ctrl+shift+left     previous_tab
# map ctrl+shift+t        new_tab
# map ctrl+shift+q        close_tab
# map ctrl+shift+l        next_layout
# map ctrl+shift+.        move_tab_forward
# map ctrl+shift+,        move_tab_backward
# map ctrl+shift+alt+t    set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{
# map ctrl+shift+equal    increase_font_size
# map ctrl+shift+minus    decrease_font_size
# map ctrl+shift+backspace restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map ctrl+shift+f6     set_font_size 10.0
# map ctrl+shift+f7     set_font_size 20.5
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
# map ctrl+shift+e         run_kitten text hints

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
# map ctrl+shift+p>f       run_kitten text hints --type path --program -

# Select a path/filename and open it with the default open program.
# map ctrl+shift+p>shift+f run_kitten text hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
# map ctrl+shift+p>l       run_kitten text hints --type line --program -

# Select words and insert into terminal.
# map ctrl+shift+p>w       run_kitten text hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
# map ctrl+shift+f11      toggle_fullscreen
# map ctrl+shift+u        input_unicode_character
# map ctrl+shift+f2       edit_config_file
#   You can customize how the URLs are
# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
# map ctrl+shift+escape   kitty_shell window

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# }}}
